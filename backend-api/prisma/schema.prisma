datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// generator client {
//   provider      = "prisma-client-js"
//   binaryTargets = ["native"]
// }
model User {
  userId    String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  // Reverse relations for audit fields
  rolesCreated       Role[]       @relation("RoleCreatedBy")
  rolesUpdated       Role[]       @relation("RoleUpdatedBy")
  menusCreated       Menu[]       @relation("MenuCreatedBy")
  menusUpdated       Menu[]       @relation("MenuUpdatedBy")
  permissionsCreated Permission[] @relation("RPCreatedBy")
  permissionsUpdated Permission[] @relation("RPUpdatedBy")

  categoriesCreated Category[] @relation("CategoryCreatedBy")
  categoriesUpdated Category[] @relation("CategoryUpdatedBy")
  productsCreated   Product[]  @relation("ProductCreatedBy")
  productsUpdated   Product[]  @relation("ProductUpdatedBy")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  addBy    String?
  updateBy String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  createdBy User? @relation("RoleCreatedBy", fields: [addBy], references: [userId])
  updatedBy User? @relation("RoleUpdatedBy", fields: [updateBy], references: [userId])

  users       User[]
  permissions Permission[]
}

model Menu {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  addBy    String?
  updateBy String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  createdBy User? @relation("MenuCreatedBy", fields: [addBy], references: [userId])
  updatedBy User? @relation("MenuUpdatedBy", fields: [updateBy], references: [userId])

  permissions Permission[]
}

model Permission {
  roleId String
  menuId String

  view   Boolean @default(false)
  create Boolean @default(false)
  update Boolean @default(false)
  delete Boolean @default(false)

  addBy    String?
  updateBy String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  role Role @relation(fields: [roleId], references: [id])
  menu Menu @relation(fields: [menuId], references: [id])

  createdBy User? @relation("RPCreatedBy", fields: [addBy], references: [userId])
  updatedBy User? @relation("RPUpdatedBy", fields: [updateBy], references: [userId])

  @@id([roleId, menuId])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  addBy    String?
  updateBy String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  createdBy User? @relation("CategoryCreatedBy", fields: [addBy], references: [userId])
  updatedBy User? @relation("CategoryUpdatedBy", fields: [updateBy], references: [userId])

  products Product[]
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  product_img String
  stock       Int     @default(0)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  addBy    String?
  updateBy String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  createdBy User? @relation("ProductCreatedBy", fields: [addBy], references: [userId])
  updatedBy User? @relation("ProductUpdatedBy", fields: [updateBy], references: [userId])
}
